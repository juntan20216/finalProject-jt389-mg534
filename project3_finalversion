"""
Math 260
Project 3 Final Version
Fall 2023

Partner 1: Jun Tan
Partner 2: Maximilian Gorbarty
Date: 10th December 2023
"""

# Import math and p3tests.
import math
from p3tests import *

################################################################################

"""
detectArbitrage
Performs the Bellman-Ford algorithm iteratively to detect negative cost cycles in a set of exchange rates
INPUTS
adjList: Adjacency list representing the currencies graph
adjMat: Adjacency matrix representing the exchange rates
tol: tolerance, checks every update step. If update is smaller than 1e-15, ignore.
OUTPUTS
An empty list if no vertex changed distance, 
OR the list that contains the negative cost cycle in proper order
"""
def detectArbitrage(adjList, adjMat, tol=1e-15):
  # Initialise all vertices
    for vert in adjList:
        vert.prev = None
        vert.dist = math.inf
    adjList[0].dist = 0

   # Perform |V| - 1 iterations of Bellman-Ford
    for iteration in range(len(adjList) - 1):
        for vert in adjList:
            for neigh in vert.neigh:
                if neigh.dist > vert.dist + adjMat[vert.rank][neigh.rank] + tol:
                    neigh.dist = vert.dist + adjMat[vert.rank][neigh.rank]
                    neigh.prev = vert

    # Record vertex distances after final iteration 
    distances = [vert.dist for vert in adjList]

    # Perform final iteration of Bellman-Ford 
    for iteration in range(len(adjList) - 1):
        for vert in adjList:
            for neigh in vert.neigh:
                if neigh.dist > vert.dist + adjMat[vert.rank][neigh.rank] + tol:
                    neigh.dist = vert.dist + adjMat[vert.rank][neigh.rank]
                    neigh.prev = vert

    # Track changes in the vertex.dist value 
    final_distances = [vert.dist for vert in adjList]

    # Detect vertex with changed distance after final iteration - indicating negative cycle 
    for i in range(len(adjList)):
        if distances[i] != final_distances[i]:
            changed_vertex = i 
            break 

    # Should return empty list if there is no negative cycle 
    if changed_vertex is None:
        return []

    # Negative cycle implementation 
    # Follow the chosen vertex's path backwards until cycle is found 
    # Use vertex.prev values
    # Initialize a negative cycle to store the values
    negCycle = []

    # Initialize a set to keep track of visited vertices 
    visited_vertices = set()

    # Start cycle at changed vertex 
    current_vertex = adjList[changed_vertex]



    # Start infinite loop, do know number of iterations 
    while True:
        


    

    return []
    ##### Your implementation goes here. #####

################################################################################

"""
rates2mat
Takes rates matrix from Currency class and creates adjacency matrix with correctly weighted edges
INPUT
rates: rates matrix from Currency class 
OUTPUT
Adjacency matrix with correctly weighted edges
"""
def rates2mat(rates):
# Using negative logarithm to transform the rates
    return [[-math.log(R) for R in row] for row in rates]

"""
Main function
see if our detectArbitrage function works and passes a set of tests
which does/does not have arbitrage oppertunities
"""
if __name__ == "__main__":
    testRates()
